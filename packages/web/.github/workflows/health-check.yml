name: Production Health Check

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check application health
        run: |
          # Test main application endpoint
          response=$(curl -s -w "%{http_code}" https://bermuda-rocket-tracker.vercel.app)
          http_code="${response: -3}"
          
          if [ "$http_code" != "200" ]; then
            echo "‚ùå Health check failed with HTTP $http_code"
            exit 1
          fi
          
          # Test API integration
          if ! echo "$response" | grep -q "Bermuda Rocket Launch Tracker"; then
            echo "‚ùå Application content validation failed"
            exit 1
          fi
          
          echo "‚úÖ Health check passed"
      
      - name: Check API endpoints
        run: |
          # Test Space Devs API accessibility
          api_response=$(curl -s -w "%{http_code}" "https://ll.thespacedevs.com/2.2.0/launch/upcoming/?limit=1")
          api_code="${api_response: -3}"
          
          if [ "$api_code" != "200" ]; then
            echo "‚ö†Ô∏è Upstream API health issue (HTTP $api_code)"
            # Don't fail deployment for upstream issues
          else
            echo "‚úÖ Upstream API accessible"
          fi
      
      - name: Performance check
        run: |
          # Measure response time
          response_time=$(curl -s -w "%{time_total}" -o /dev/null https://bermuda-rocket-tracker.vercel.app)
          
          # Fail if response time > 5 seconds
          if (( $(echo "$response_time > 5.0" | bc -l) )); then
            echo "‚ùå Performance degraded: ${response_time}s response time"
            exit 1
          fi
          
          echo "‚úÖ Performance acceptable: ${response_time}s"
      
      - name: Bundle size check
        run: |
          # Download and check bundle size
          manifest_url="https://bermuda-rocket-tracker.vercel.app/asset-manifest.json"

          if ! curl -sf "$manifest_url" -o manifest.json; then
            echo "‚ö†Ô∏è Unable to download asset manifest - skipping bundle check"
            echo "This may be expected for SPA apps without asset-manifest.json"
            exit 0
          fi

          # Try to find main JS bundle path using jq
          main_js_path=$(jq -r '.files."main.js" // .entrypoints[] | select(. | type == "string" and endswith(".js") and contains("main"))' manifest.json 2>/dev/null | head -1 || true)

          if [ -z "$main_js_path" ]; then
            echo "‚ö†Ô∏è Unable to locate main bundle in asset manifest - skipping size check"
            rm -f manifest.json
            exit 0
          fi

          # Ensure the path is absolute
          case "$main_js_path" in
            /*) main_js_url="https://bermuda-rocket-tracker.vercel.app$main_js_path" ;;
            *) main_js_url="https://bermuda-rocket-tracker.vercel.app/$main_js_path" ;;
          esac

          if ! curl -sf "$main_js_url" -o main.js; then
            echo "‚ö†Ô∏è Failed to download main bundle from $main_js_url - skipping size check"
            rm -f manifest.json
            exit 0
          fi

          bundle_size=$(wc -c < main.js)
          bundle_kb=$((bundle_size / 1024))
          bundle_mb=$((bundle_size / 1024 / 1024))

          # Fail if bundle > 5MB (reasonable limit for modern SPAs)
          if [ $bundle_mb -gt 5 ]; then
            echo "‚ùå Bundle size too large: ${bundle_mb}MB (${bundle_kb}KB)"
            rm -f manifest.json main.js
            exit 1
          fi

          echo "‚úÖ Bundle size acceptable: ${bundle_mb}MB (${bundle_kb}KB)"
          rm -f manifest.json main.js

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: health-check
    if: failure()
    steps:
      - name: Send failure notification
        run: |
          echo "üö® Production health check failed!"
          echo "Timestamp: $(date)"
          echo "Consider rolling back to previous deployment"
